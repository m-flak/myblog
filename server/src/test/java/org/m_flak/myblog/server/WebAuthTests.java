package org.m_flak.myblog.server;

import java.lang.IllegalArgumentException;
import java.util.Base64;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.junit.matchers.JUnitMatchers.containsString;

import org.json.JSONObject;
import org.json.JSONTokener;
import org.json.JSONException;
import org.apache.http.HttpResponse;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.ContentType;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.LaxRedirectStrategy;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;

import org.m_flak.myblog.server.db.ServerDatabase;
import org.m_flak.myblog.server.sec.AccessToken;

public class WebAuthTests extends TestUsingWebDB {
    private WebAuthTestsFixture watFixture;

    private void runAssertionsOnTokenJSON(HttpResponse jsonResponse)
                                                            throws Exception {
        assertThat(
            jsonResponse.getEntity().getContentType().getValue(),
            containsString("application/json")
        );

        JSONObject tokenJSON =
            new JSONObject(new JSONTokener(jsonResponse.getEntity().getContent()));

        try {
            assertThat(
                tokenJSON.getString("errorCode"),
                containsString("OK")
            );
            assertTrue(tokenJSON.getString("data").length() > 0);
            assertEquals(64, tokenJSON.getString("data").length());

            var token = AccessToken.generateFromString(tokenJSON.getString("data"));
            assertEquals(64, token.toString().length());
        }
        catch(JSONException je) {
            fail("Server returned malformed JSON!");
        }
        catch(IllegalArgumentException ie) {
            fail("Access Token Invalid: "+ie.getMessage());
        }
    }

    @Override
    @Before
    public void setUp() throws Exception {
        super.setUp();
        watFixture = new WebAuthTestsFixture(
            ServerDatabase.inst().driv(),
            ServerDatabase.inst().conn(),
            ServerDatabase.inst().db().get()
        );
    }

    @Test
    public void aSanityCheck() {
        assertTrue(webServer.getWebAppRoot().endsWith("/"));
    }

    @Test
    public void updateTokenTest() throws Exception {
        watFixture.createMockUsers();
        watFixture.updateMockUserToken();

        assertFalse(watFixture.tokenUser1 == watFixture.tokenUpdatedUser1);
    }

    @Test
    public void requestPubKeyTest() throws Exception {
        final String requestURL =
            "http://127.0.0.1:8188"+webServer.getWebAppRoot()+"request";

        var httpClient = HttpClients.createDefault();
        try {
            HttpGet getRequest = new HttpGet(requestURL);
            var theResponse = httpClient.execute(getRequest);
            try {
                assertThat(
                    theResponse.getEntity().getContentType().getValue(),
                    containsString("application/json")
                );

                JSONObject rspJSON =
                    new JSONObject(new JSONTokener(theResponse.getEntity().getContent()));

                try {
                    assertThat(
                        rspJSON.getString("errorCode"),
                        containsString("OK")
                    );
                    assertTrue(rspJSON.getString("data").length() > 0);
                }
                catch(JSONException je) {
                    fail("Server returned malformed JSON!");
                }
            }
            finally {
                theResponse.close();
            }
        }
        finally {
            httpClient.close();
        }
    }

    @Test
    public void loginTest() throws Exception {
        watFixture.createMockUsers();

        final String loginURL =
            "http://127.0.0.1:8188"+webServer.getWebAppRoot()+"login";

        /* User1 will have a token already.
         * User2's will be generated by the request
         */

        StringEntity dataUser1 =
            new StringEntity(new JSONObject()
                             .put("user", "mockuser1")
                             .put("pass", Base64.getEncoder().encodeToString(watFixture.getPasswordUser1()))
                             .toString(),
                             ContentType.APPLICATION_JSON
                             );
        StringEntity dataUser2 =
            new StringEntity(new JSONObject()
                             .put("user", "mockuser2")
                             .put("pass", Base64.getEncoder().encodeToString(watFixture.getPasswordUser2()))
                             .toString(),
                             ContentType.APPLICATION_JSON
                             );

        /* we need to build our httpclient this time */
        var httpClient =
            HttpClientBuilder.create()
            .useSystemProperties()
            .setRedirectStrategy(new LaxRedirectStrategy())
            .build();

        try {
            /* Try loggin in and acquiring access token for mockuser1 */
            HttpPost user1Post = new HttpPost(loginURL);
            user1Post.setEntity(dataUser1);

            var user1Response = httpClient.execute(user1Post);
            try {
                runAssertionsOnTokenJSON(user1Response);
            }
            finally {
                user1Response.close();
            }

            /* Try loggin in and acquiring access token for mockuser2 */
            HttpPost user2Post = new HttpPost(loginURL);
            user2Post.setEntity(dataUser2);

            var user2Response = httpClient.execute(user2Post);
            try {
                runAssertionsOnTokenJSON(user2Response);
            }
            finally {
                user2Response.close();
            }
        }
        finally {
            httpClient.close();
        }

    }

    @Test
    public void logoutTest() throws Exception {
        watFixture.createMockUsers();

        final String logoutURL =
            new URIBuilder("http://127.0.0.1:8188"+webServer.getWebAppRoot()+"logout")
            .addParameter("tok", watFixture.tokenUser1)
            .build()
            .toString();

        var httpClient = HttpClients.createDefault();
        try {
            HttpGet getLogout = new HttpGet(logoutURL);
            var theResponse = httpClient.execute(getLogout);
            try {
                assertEquals(200, theResponse.getStatusLine().getStatusCode());
                assertTrue(watFixture.mockUserTokenIsExpired());

                // should succeed also
                watFixture.invalidateMockUserToken();
                assertTrue(watFixture.mockUserTokenIsExpired());
            }
            finally {
                theResponse.close();
            }
        }
        finally {
            httpClient.close();
        }
    }
}
