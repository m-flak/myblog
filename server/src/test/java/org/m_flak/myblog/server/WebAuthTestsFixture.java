package org.m_flak.myblog.server;

import java.sql.Connection;

import org.apache.empire.db.DBDatabaseDriver;

import org.m_flak.myblog.server.db.model.Database;
import org.m_flak.myblog.server.sec.PasswordEncryptor;

import static org.m_flak.myblog.server.db.methods.UserMethods.createUser;
import static org.m_flak.myblog.server.db.methods.AccessTokenMethods.createTokenForUser;
import static org.m_flak.myblog.server.db.methods.AccessTokenMethods.updateUserToken;
import static org.m_flak.myblog.server.db.methods.AccessTokenMethods.invalidateToken;
import static org.m_flak.myblog.server.db.methods.AccessTokenMethods.fetchUserToken;
import static org.m_flak.myblog.server.db.methods.AccessTokenMethods.userTokenExpired;

public class WebAuthTestsFixture extends DBFixtureBase {
    protected PasswordEncryptor ourPE;

    public String tokenUser1;
    public String tokenUpdatedUser1;

    protected final String[] mockUser1 = new String[]{
                                                     "mockuser1",
                                                     "user1@mock.com",
                                                     "...",
                                                     "password1"
                                                   };

    protected final String[] mockUser2 = new String[]{
                                                     "mockuser2",
                                                     "user2@mock.com",
                                                     "...",
                                                     "password2"
                                                   };

    public WebAuthTestsFixture(DBDatabaseDriver driver, Connection connection, Database db) {
        super(driver, connection, db);
        ourPE = new PasswordEncryptor();
    }

    public byte[] getPasswordUser1() {
        return ourPE.encrypt(mockUser1[3]).getPassword();
    }
    public byte[] getPasswordUser2() {
        return ourPE.encrypt(mockUser2[3]).getPassword();
    }

    /**::::::::::::::::::::::::::::::::::::::
      * These functions operate only on mockuser1, because only it has a
      * pre-generated token.
     */
    public void updateMockUserToken() {
        ourDB.open(ourDriver, ourConn);

        tokenUpdatedUser1 = updateUserToken(mockUser1[0], ourDB, ourConn);

        ourDB.commit(ourConn);
        ourDB.close(ourConn);
    }

    public void invalidateMockUserToken() {
        ourDB.open(ourDriver, ourConn);

        invalidateToken(fetchUserToken(mockUser1[0], ourDB, ourConn), ourDB, ourConn);

        ourDB.commit(ourConn);
        ourDB.close(ourConn);
    }
    public boolean mockUserTokenIsExpired() {
        ourDB.open(ourDriver, ourConn);

        final boolean returnMe = userTokenExpired(mockUser1[0], ourDB, ourConn);

        ourDB.close(ourConn);
        return returnMe;
    }
    /**::::::::::::::::::::::::::::::::::::::**/

    public void createMockUsers() {
        ourDB.open(ourDriver, ourConn);

        /*
         * User1 will have a pre-existing token
         * User2 will have one generated by the request
         *
         */
        createUser(
            mockUser1[0],
            mockUser1[1],
            mockUser1[2],
            ourPE.encrypt(mockUser1[3]).getPassword(),
            ourDB,
            ourConn
        );
        tokenUser1 = createTokenForUser(mockUser1[0], ourDB, ourConn);

        createUser(
            mockUser2[0],
            mockUser2[1],
            mockUser2[2],
            ourPE.encrypt(mockUser2[3]).getPassword(),
            ourDB,
            ourConn
        );

        ourDB.commit(ourConn);
        ourDB.close(ourConn);
    }
}
